package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ContainerMock implements containers.container
type ContainerMock struct {
	t minimock.Tester

	funcRun          func() (err error)
	inspectFuncRun   func()
	afterRunCounter  uint64
	beforeRunCounter uint64
	RunMock          mContainerMockRun

	funcStop          func() (err error)
	inspectFuncStop   func()
	afterStopCounter  uint64
	beforeStopCounter uint64
	StopMock          mContainerMockStop
}

// NewContainerMock returns a mock for containers.container
func NewContainerMock(t minimock.Tester) *ContainerMock {
	m := &ContainerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.RunMock = mContainerMockRun{mock: m}

	m.StopMock = mContainerMockStop{mock: m}

	return m
}

type mContainerMockRun struct {
	mock               *ContainerMock
	defaultExpectation *ContainerMockRunExpectation
	expectations       []*ContainerMockRunExpectation
}

// ContainerMockRunExpectation specifies expectation struct of the container.Run
type ContainerMockRunExpectation struct {
	mock *ContainerMock

	results *ContainerMockRunResults
	Counter uint64
}

// ContainerMockRunResults contains results of the container.Run
type ContainerMockRunResults struct {
	err error
}

// Expect sets up expected params for container.Run
func (mmRun *mContainerMockRun) Expect() *mContainerMockRun {
	if mmRun.mock.funcRun != nil {
		mmRun.mock.t.Fatalf("ContainerMock.Run mock is already set by Set")
	}

	if mmRun.defaultExpectation == nil {
		mmRun.defaultExpectation = &ContainerMockRunExpectation{}
	}

	return mmRun
}

// Inspect accepts an inspector function that has same arguments as the container.Run
func (mmRun *mContainerMockRun) Inspect(f func()) *mContainerMockRun {
	if mmRun.mock.inspectFuncRun != nil {
		mmRun.mock.t.Fatalf("Inspect function is already set for ContainerMock.Run")
	}

	mmRun.mock.inspectFuncRun = f

	return mmRun
}

// Return sets up results that will be returned by container.Run
func (mmRun *mContainerMockRun) Return(err error) *ContainerMock {
	if mmRun.mock.funcRun != nil {
		mmRun.mock.t.Fatalf("ContainerMock.Run mock is already set by Set")
	}

	if mmRun.defaultExpectation == nil {
		mmRun.defaultExpectation = &ContainerMockRunExpectation{mock: mmRun.mock}
	}
	mmRun.defaultExpectation.results = &ContainerMockRunResults{err}
	return mmRun.mock
}

//Set uses given function f to mock the container.Run method
func (mmRun *mContainerMockRun) Set(f func() (err error)) *ContainerMock {
	if mmRun.defaultExpectation != nil {
		mmRun.mock.t.Fatalf("Default expectation is already set for the container.Run method")
	}

	if len(mmRun.expectations) > 0 {
		mmRun.mock.t.Fatalf("Some expectations are already set for the container.Run method")
	}

	mmRun.mock.funcRun = f
	return mmRun.mock
}

// Run implements containers.container
func (mmRun *ContainerMock) Run() (err error) {
	mm_atomic.AddUint64(&mmRun.beforeRunCounter, 1)
	defer mm_atomic.AddUint64(&mmRun.afterRunCounter, 1)

	if mmRun.inspectFuncRun != nil {
		mmRun.inspectFuncRun()
	}

	if mmRun.RunMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRun.RunMock.defaultExpectation.Counter, 1)

		mm_results := mmRun.RunMock.defaultExpectation.results
		if mm_results == nil {
			mmRun.t.Fatal("No results are set for the ContainerMock.Run")
		}
		return (*mm_results).err
	}
	if mmRun.funcRun != nil {
		return mmRun.funcRun()
	}
	mmRun.t.Fatalf("Unexpected call to ContainerMock.Run.")
	return
}

// RunAfterCounter returns a count of finished ContainerMock.Run invocations
func (mmRun *ContainerMock) RunAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRun.afterRunCounter)
}

// RunBeforeCounter returns a count of ContainerMock.Run invocations
func (mmRun *ContainerMock) RunBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRun.beforeRunCounter)
}

// MinimockRunDone returns true if the count of the Run invocations corresponds
// the number of defined expectations
func (m *ContainerMock) MinimockRunDone() bool {
	for _, e := range m.RunMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RunMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRunCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRun != nil && mm_atomic.LoadUint64(&m.afterRunCounter) < 1 {
		return false
	}
	return true
}

// MinimockRunInspect logs each unmet expectation
func (m *ContainerMock) MinimockRunInspect() {
	for _, e := range m.RunMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ContainerMock.Run")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RunMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRunCounter) < 1 {
		m.t.Error("Expected call to ContainerMock.Run")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRun != nil && mm_atomic.LoadUint64(&m.afterRunCounter) < 1 {
		m.t.Error("Expected call to ContainerMock.Run")
	}
}

type mContainerMockStop struct {
	mock               *ContainerMock
	defaultExpectation *ContainerMockStopExpectation
	expectations       []*ContainerMockStopExpectation
}

// ContainerMockStopExpectation specifies expectation struct of the container.Stop
type ContainerMockStopExpectation struct {
	mock *ContainerMock

	results *ContainerMockStopResults
	Counter uint64
}

// ContainerMockStopResults contains results of the container.Stop
type ContainerMockStopResults struct {
	err error
}

// Expect sets up expected params for container.Stop
func (mmStop *mContainerMockStop) Expect() *mContainerMockStop {
	if mmStop.mock.funcStop != nil {
		mmStop.mock.t.Fatalf("ContainerMock.Stop mock is already set by Set")
	}

	if mmStop.defaultExpectation == nil {
		mmStop.defaultExpectation = &ContainerMockStopExpectation{}
	}

	return mmStop
}

// Inspect accepts an inspector function that has same arguments as the container.Stop
func (mmStop *mContainerMockStop) Inspect(f func()) *mContainerMockStop {
	if mmStop.mock.inspectFuncStop != nil {
		mmStop.mock.t.Fatalf("Inspect function is already set for ContainerMock.Stop")
	}

	mmStop.mock.inspectFuncStop = f

	return mmStop
}

// Return sets up results that will be returned by container.Stop
func (mmStop *mContainerMockStop) Return(err error) *ContainerMock {
	if mmStop.mock.funcStop != nil {
		mmStop.mock.t.Fatalf("ContainerMock.Stop mock is already set by Set")
	}

	if mmStop.defaultExpectation == nil {
		mmStop.defaultExpectation = &ContainerMockStopExpectation{mock: mmStop.mock}
	}
	mmStop.defaultExpectation.results = &ContainerMockStopResults{err}
	return mmStop.mock
}

//Set uses given function f to mock the container.Stop method
func (mmStop *mContainerMockStop) Set(f func() (err error)) *ContainerMock {
	if mmStop.defaultExpectation != nil {
		mmStop.mock.t.Fatalf("Default expectation is already set for the container.Stop method")
	}

	if len(mmStop.expectations) > 0 {
		mmStop.mock.t.Fatalf("Some expectations are already set for the container.Stop method")
	}

	mmStop.mock.funcStop = f
	return mmStop.mock
}

// Stop implements containers.container
func (mmStop *ContainerMock) Stop() (err error) {
	mm_atomic.AddUint64(&mmStop.beforeStopCounter, 1)
	defer mm_atomic.AddUint64(&mmStop.afterStopCounter, 1)

	if mmStop.inspectFuncStop != nil {
		mmStop.inspectFuncStop()
	}

	if mmStop.StopMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStop.StopMock.defaultExpectation.Counter, 1)

		mm_results := mmStop.StopMock.defaultExpectation.results
		if mm_results == nil {
			mmStop.t.Fatal("No results are set for the ContainerMock.Stop")
		}
		return (*mm_results).err
	}
	if mmStop.funcStop != nil {
		return mmStop.funcStop()
	}
	mmStop.t.Fatalf("Unexpected call to ContainerMock.Stop.")
	return
}

// StopAfterCounter returns a count of finished ContainerMock.Stop invocations
func (mmStop *ContainerMock) StopAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStop.afterStopCounter)
}

// StopBeforeCounter returns a count of ContainerMock.Stop invocations
func (mmStop *ContainerMock) StopBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStop.beforeStopCounter)
}

// MinimockStopDone returns true if the count of the Stop invocations corresponds
// the number of defined expectations
func (m *ContainerMock) MinimockStopDone() bool {
	for _, e := range m.StopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStop != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		return false
	}
	return true
}

// MinimockStopInspect logs each unmet expectation
func (m *ContainerMock) MinimockStopInspect() {
	for _, e := range m.StopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ContainerMock.Stop")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		m.t.Error("Expected call to ContainerMock.Stop")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStop != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		m.t.Error("Expected call to ContainerMock.Stop")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ContainerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockRunInspect()

		m.MinimockStopInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ContainerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ContainerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRunDone() &&
		m.MinimockStopDone()
}
