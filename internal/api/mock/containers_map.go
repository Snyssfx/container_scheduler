package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ContainersMapMock implements api.containersMap
type ContainersMapMock struct {
	t minimock.Tester

	funcCalculate          func(ctx context.Context, seed int, input int) (i1 int, err error)
	inspectFuncCalculate   func(ctx context.Context, seed int, input int)
	afterCalculateCounter  uint64
	beforeCalculateCounter uint64
	CalculateMock          mContainersMapMockCalculate
}

// NewContainersMapMock returns a mock for api.containersMap
func NewContainersMapMock(t minimock.Tester) *ContainersMapMock {
	m := &ContainersMapMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CalculateMock = mContainersMapMockCalculate{mock: m}
	m.CalculateMock.callArgs = []*ContainersMapMockCalculateParams{}

	return m
}

type mContainersMapMockCalculate struct {
	mock               *ContainersMapMock
	defaultExpectation *ContainersMapMockCalculateExpectation
	expectations       []*ContainersMapMockCalculateExpectation

	callArgs []*ContainersMapMockCalculateParams
	mutex    sync.RWMutex
}

// ContainersMapMockCalculateExpectation specifies expectation struct of the containersMap.Calculate
type ContainersMapMockCalculateExpectation struct {
	mock    *ContainersMapMock
	params  *ContainersMapMockCalculateParams
	results *ContainersMapMockCalculateResults
	Counter uint64
}

// ContainersMapMockCalculateParams contains parameters of the containersMap.Calculate
type ContainersMapMockCalculateParams struct {
	ctx   context.Context
	seed  int
	input int
}

// ContainersMapMockCalculateResults contains results of the containersMap.Calculate
type ContainersMapMockCalculateResults struct {
	i1  int
	err error
}

// Expect sets up expected params for containersMap.Calculate
func (mmCalculate *mContainersMapMockCalculate) Expect(ctx context.Context, seed int, input int) *mContainersMapMockCalculate {
	if mmCalculate.mock.funcCalculate != nil {
		mmCalculate.mock.t.Fatalf("ContainersMapMock.Calculate mock is already set by Set")
	}

	if mmCalculate.defaultExpectation == nil {
		mmCalculate.defaultExpectation = &ContainersMapMockCalculateExpectation{}
	}

	mmCalculate.defaultExpectation.params = &ContainersMapMockCalculateParams{ctx, seed, input}
	for _, e := range mmCalculate.expectations {
		if minimock.Equal(e.params, mmCalculate.defaultExpectation.params) {
			mmCalculate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCalculate.defaultExpectation.params)
		}
	}

	return mmCalculate
}

// Inspect accepts an inspector function that has same arguments as the containersMap.Calculate
func (mmCalculate *mContainersMapMockCalculate) Inspect(f func(ctx context.Context, seed int, input int)) *mContainersMapMockCalculate {
	if mmCalculate.mock.inspectFuncCalculate != nil {
		mmCalculate.mock.t.Fatalf("Inspect function is already set for ContainersMapMock.Calculate")
	}

	mmCalculate.mock.inspectFuncCalculate = f

	return mmCalculate
}

// Return sets up results that will be returned by containersMap.Calculate
func (mmCalculate *mContainersMapMockCalculate) Return(i1 int, err error) *ContainersMapMock {
	if mmCalculate.mock.funcCalculate != nil {
		mmCalculate.mock.t.Fatalf("ContainersMapMock.Calculate mock is already set by Set")
	}

	if mmCalculate.defaultExpectation == nil {
		mmCalculate.defaultExpectation = &ContainersMapMockCalculateExpectation{mock: mmCalculate.mock}
	}
	mmCalculate.defaultExpectation.results = &ContainersMapMockCalculateResults{i1, err}
	return mmCalculate.mock
}

//Set uses given function f to mock the containersMap.Calculate method
func (mmCalculate *mContainersMapMockCalculate) Set(f func(ctx context.Context, seed int, input int) (i1 int, err error)) *ContainersMapMock {
	if mmCalculate.defaultExpectation != nil {
		mmCalculate.mock.t.Fatalf("Default expectation is already set for the containersMap.Calculate method")
	}

	if len(mmCalculate.expectations) > 0 {
		mmCalculate.mock.t.Fatalf("Some expectations are already set for the containersMap.Calculate method")
	}

	mmCalculate.mock.funcCalculate = f
	return mmCalculate.mock
}

// When sets expectation for the containersMap.Calculate which will trigger the result defined by the following
// Then helper
func (mmCalculate *mContainersMapMockCalculate) When(ctx context.Context, seed int, input int) *ContainersMapMockCalculateExpectation {
	if mmCalculate.mock.funcCalculate != nil {
		mmCalculate.mock.t.Fatalf("ContainersMapMock.Calculate mock is already set by Set")
	}

	expectation := &ContainersMapMockCalculateExpectation{
		mock:   mmCalculate.mock,
		params: &ContainersMapMockCalculateParams{ctx, seed, input},
	}
	mmCalculate.expectations = append(mmCalculate.expectations, expectation)
	return expectation
}

// Then sets up containersMap.Calculate return parameters for the expectation previously defined by the When method
func (e *ContainersMapMockCalculateExpectation) Then(i1 int, err error) *ContainersMapMock {
	e.results = &ContainersMapMockCalculateResults{i1, err}
	return e.mock
}

// Calculate implements api.containersMap
func (mmCalculate *ContainersMapMock) Calculate(ctx context.Context, seed int, input int) (i1 int, err error) {
	mm_atomic.AddUint64(&mmCalculate.beforeCalculateCounter, 1)
	defer mm_atomic.AddUint64(&mmCalculate.afterCalculateCounter, 1)

	if mmCalculate.inspectFuncCalculate != nil {
		mmCalculate.inspectFuncCalculate(ctx, seed, input)
	}

	mm_params := &ContainersMapMockCalculateParams{ctx, seed, input}

	// Record call args
	mmCalculate.CalculateMock.mutex.Lock()
	mmCalculate.CalculateMock.callArgs = append(mmCalculate.CalculateMock.callArgs, mm_params)
	mmCalculate.CalculateMock.mutex.Unlock()

	for _, e := range mmCalculate.CalculateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCalculate.CalculateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCalculate.CalculateMock.defaultExpectation.Counter, 1)
		mm_want := mmCalculate.CalculateMock.defaultExpectation.params
		mm_got := ContainersMapMockCalculateParams{ctx, seed, input}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCalculate.t.Errorf("ContainersMapMock.Calculate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCalculate.CalculateMock.defaultExpectation.results
		if mm_results == nil {
			mmCalculate.t.Fatal("No results are set for the ContainersMapMock.Calculate")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCalculate.funcCalculate != nil {
		return mmCalculate.funcCalculate(ctx, seed, input)
	}
	mmCalculate.t.Fatalf("Unexpected call to ContainersMapMock.Calculate. %v %v %v", ctx, seed, input)
	return
}

// CalculateAfterCounter returns a count of finished ContainersMapMock.Calculate invocations
func (mmCalculate *ContainersMapMock) CalculateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCalculate.afterCalculateCounter)
}

// CalculateBeforeCounter returns a count of ContainersMapMock.Calculate invocations
func (mmCalculate *ContainersMapMock) CalculateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCalculate.beforeCalculateCounter)
}

// Calls returns a list of arguments used in each call to ContainersMapMock.Calculate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCalculate *mContainersMapMockCalculate) Calls() []*ContainersMapMockCalculateParams {
	mmCalculate.mutex.RLock()

	argCopy := make([]*ContainersMapMockCalculateParams, len(mmCalculate.callArgs))
	copy(argCopy, mmCalculate.callArgs)

	mmCalculate.mutex.RUnlock()

	return argCopy
}

// MinimockCalculateDone returns true if the count of the Calculate invocations corresponds
// the number of defined expectations
func (m *ContainersMapMock) MinimockCalculateDone() bool {
	for _, e := range m.CalculateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CalculateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCalculateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCalculate != nil && mm_atomic.LoadUint64(&m.afterCalculateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCalculateInspect logs each unmet expectation
func (m *ContainersMapMock) MinimockCalculateInspect() {
	for _, e := range m.CalculateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ContainersMapMock.Calculate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CalculateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCalculateCounter) < 1 {
		if m.CalculateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ContainersMapMock.Calculate")
		} else {
			m.t.Errorf("Expected call to ContainersMapMock.Calculate with params: %#v", *m.CalculateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCalculate != nil && mm_atomic.LoadUint64(&m.afterCalculateCounter) < 1 {
		m.t.Error("Expected call to ContainersMapMock.Calculate")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ContainersMapMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCalculateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ContainersMapMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ContainersMapMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCalculateDone()
}
